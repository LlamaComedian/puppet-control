<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>An example of how to construct a Jenkins job to run and report on your acceptance tests. You&apos;ll need to have deployed to your integration server and started the application prior to running this job. How you would deploy depends on how you have implemented your solution.&#xd;
</description>
  <displayName>Sample Acceptance Test job</displayName>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/LandRegistry-Ops/ci-sample-app.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Install specific gems as detailed in the Gemfile for your application.
bundle install</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># Set up any application/environment variables you need to enable the tests to run.
# For example, URL to access the running application.

export APPLICATION_ENVIRONMENT_VARIABLE = &apos;Value&apos;

# Change to the top level directory that holds your tests, if you need to.

cd acceptance-tests

# Start testing - this example shows a number of commonly used options.
# The &apos;format&apos; option is used to specify the output format, in this case, in JUnit XML format
# for interpretation by the reporting step, executed in the Post Build Action step below,
# and a &apos;pretty&apos; format that can be seen in the job console output.
# The &apos;out&apos; option specifies where the output files are to go.

cucumber --format junit --out $WORKSPACE/results/ --format pretty</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <xunit plugin="xunit@1.98">
      <types>
        <JUnitType>
          <pattern>reports/*.xml</pattern>
          <skipNoTestFiles>false</skipNoTestFiles>
          <failIfNotNew>true</failIfNotNew>
          <deleteOutputFiles>true</deleteOutputFiles>
          <stopProcessingIfError>true</stopProcessingIfError>
        </JUnitType>
      </types>
      <thresholds>
        <org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.FailedThreshold>
        <org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
          <unstableThreshold></unstableThreshold>
          <unstableNewThreshold></unstableNewThreshold>
          <failureThreshold></failureThreshold>
          <failureNewThreshold></failureNewThreshold>
        </org.jenkinsci.plugins.xunit.threshold.SkippedThreshold>
      </thresholds>
      <thresholdMode>1</thresholdMode>
      <extraConfiguration>
        <testTimeMargin>3000</testTimeMargin>
      </extraConfiguration>
    </xunit>
  </publishers>
  <buildWrappers>
    <ruby-proxy-object>
      <ruby-object ruby-class="Jenkins::Tasks::BuildWrapperProxy" pluginid="rbenv">
        <pluginid pluginid="rbenv" ruby-class="String">rbenv</pluginid>
        <object ruby-class="RbenvWrapper" pluginid="rbenv">
          <ruby__build__repository pluginid="rbenv" ruby-class="String">https://github.com/sstephenson/ruby-build.git</ruby__build__repository>
          <rbenv__root pluginid="rbenv" ruby-class="String">$HOME/.rbenv</rbenv__root>
          <rbenv__repository pluginid="rbenv" ruby-class="String">https://github.com/sstephenson/rbenv.git</rbenv__repository>
          <rbenv__revision pluginid="rbenv" ruby-class="String">master</rbenv__revision>
          <ruby__build__revision pluginid="rbenv" ruby-class="String">master</ruby__build__revision>
          <gem__list pluginid="rbenv" ruby-class="String">bundler,rake</gem__list>
          <version pluginid="rbenv" ruby-class="String">2.1.2</version>
          <ignore__local__version ruby-class="FalseClass" pluginid="rbenv"/>
        </object>
      </ruby-object>
    </ruby-proxy-object>
  </buildWrappers>
</project>
