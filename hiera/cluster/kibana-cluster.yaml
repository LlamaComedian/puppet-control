classes:
  - 'kibana'
  - 'ha'
  - 'firewallservice'

ha::virtual_ip: 192.168.42.20
ha::interface: eth1
ha::lb_instances:
  default:
    port: 8081
    healthcheck: /api/status
    auth_group: kibana_users
    backends:
      - 192.168.42.21:8080
      - 192.168.42.22:8080
ha::auth_users:
  kibana_users:
    userone: $6$yMgsow58.g/Z$mBjHfdVzqcF/LN.iwV23Eyqg.yGPTsp9pOwaStsJ6c4I4zL7BhucVVAkv5guf7OVRr8Pw0mHF4NrWBRCG5ci7/ #password1
    usertwo: $6$RZ86vRkQ$aRKN1HOsk6bDHBbMhS7jSo/p1NGFl4PvwY3KpU.72i./LvITi41nL84EkxOFXl.6Bmhynj/L7pYbfF0rUHtOB0 #password2
             # python -c 'import crypt,getpass; print(crypt.crypt(getpass.getpass(), crypt.mksalt(crypt.METHOD_SHA512)))'

kibana::ensure: 5.3.0-1
kibana::config:
  server.port:  8080
  elasticsearch.url: 'http://192.168.42.10:9201'
  logging.verbose: true
  server.host: '0.0.0.0'
  elasticsearch.preserveHost: 'true'

firewallservice::ensure: running

# This blocks port 8080 from all external users, so are forced to use the haproxy
firewallservice::rules:
  '200 Allow HTTP access on port 8081 from all addresses':
    chain: 'SERVICE'
    port: '8081' # vip port
    proto: tcp
    action: accept
